# === Download all assets from GitHub release "tool" to Desktop\pccheckingtool ===
$Owner   = 'tasfik222'
$Repo    = 'pcchecking'
$TagName = 'tool'

# Ensure TLS 1.2 for GitHub
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

# Destination folder on Desktop
$desktop = [Environment]::GetFolderPath('Desktop')
$destDir = Join-Path $desktop 'pccheckingtool'
New-Item -ItemType Directory -Path $destDir -Force | Out-Null

# GitHub API endpoint for release by tag
$api = "https://api.github.com/repos/$Owner/$Repo/releases/tags/$TagName"
$headers = @{
  'User-Agent' = 'PowerShell'
  'Accept'     = 'application/vnd.github+json'
}

try {
    $release = Invoke-RestMethod -Uri $api -Headers $headers -ErrorAction Stop
} catch {
    Write-Host "‚ùå Release info ‡¶Ü‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø: $($_.Exception.Message)"
    Write-Host "‚û°Ô∏è  ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    exit 1
}

if (-not $release.assets -or $release.assets.Count -eq 0) {
    Write-Host "‚ö†Ô∏è  ‡¶è‡¶á ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú‡ßá ‡¶ï‡ßã‡¶® asset ‡¶®‡ßá‡¶á‡•§"
    exit 0
}

Write-Host "üì• ${Owner}/${Repo} :: tag '$TagName' ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßã‡¶ü $($release.assets.Count)‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá..."
$ok = 0; $fail = 0

foreach ($asset in $release.assets) {
    $url  = $asset.browser_download_url
    $name = $asset.name
    $out  = Join-Path $destDir $name

    Write-Host "  ‚¨áÔ∏è  Downloading: $name"
    try {
        Invoke-WebRequest -Uri $url -OutFile $out -Headers @{ 'User-Agent' = 'PowerShell' } -UseBasicParsing -ErrorAction Stop
        $ok++
    } catch {
        Write-Host "    ‚ùå ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $name ‚Äî $($_.Exception.Message)"
        $fail++
    }
}

Write-Host ""
Write-Host "‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßá‡¶∑!"
Write-Host "   ‚úÖ ‡¶∏‡¶´‡¶≤: $ok"
Write-Host "   ‚ùå ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $fail"
Write-Host "üìÇ ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®: $destDir"
